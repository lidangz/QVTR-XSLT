
transformation umlTOrdbms(uml:SimpleUML, rdbms:SimpleRDBMS) {

	top relation PackageToSchema {
	  
	  pn : String;
	  
	  checkonly domain uml p : Package {
	    name = pn
	  };
	  
	  enforce domain rdbms s : Schema {
	    name = pn
	  };
	}

	top relation ClassToTable {
	  
	  cn : String;
	  prefix : String;
	  
	  checkonly domain uml c : Class {
	    namespace = p : Package {
	    },
	    kind = 'Persistent',
	    name = cn
	  };
	  
	  enforce domain rdbms t : Table {
	    schema = s : Schema {
	    },
	    name = cn,
	    column = cl : Column {
	      name = cn + '_tid',
	      type = 'NUMBER',
	      rkey= k : Key{}
	    },
	    rkey = k : Key {
	      column = cl : Column{},
	      name = cn + '_pk'
	    }
	  };
	  
	  when {
	    PackageToSchema(p, s);
	  }
	  
	  where {
	    prefix = cn;
	    AttributeToColumn(c, t, prefix);
	  }
	  
	}
	
	relation AttributeToColumn {	 
	  
	  checkonly domain uml c :Class {
	  };
	  
	  enforce domain rdbms t : Table {
	  };
	  
	  primitive domain prefix : String;
	  
	  where {
	    ComplexAttributeToColumn(c, t, prefix);
	    PrimitiveAttributeToColumn(c, t, prefix);
	    SuperAttributeToColumn(c, t, prefix);
	  }
	  
	}
	
	relation PrimitiveAttributeToColumn {
	  
	  an : String;
	  pn : String;
	  cn : String;
	  sqltype : String;
	  
	  checkonly domain uml c : Class {
	    attribute = a : Attribute {
	      name = an,
	      type = p : PrimitiveDataType {
	        name = pn
	      }
	    }
	  };
	  
	  enforce domain rdbms t : Table {
	    column = cl : Column {
	      name = cn,
	      type = sqltype
	    }
	  };
	  
	  primitive domain prefix : String;
	  
	  where {
	    cn = if prefix = '' then
	      an
	    else
	      prefix + '_' + an
	    endif;
	    sqltype = PrimitiveTypeToSqlType(pn);
	  }
	  
	}
	
	relation ComplexAttributeToColumn {
	  
	  an : String;
	  newPrefix : String;
	  
	  checkonly domain uml c : Class {
	    attribute = a : Attribute {
	      name = an,
	      type = tc : Class {
	      }
	    }
	  };
	  
	  enforce domain rdbms t : Table {
	  };
	  
	  primitive domain prefix : String;
	  
	  where {
	    newPrefix = prefix + '_' + an;
	    AttributeToColumn(tc, t, newPrefix);
	  }
	  
	}
	
	relation SuperAttributeToColumn {
	  
	  checkonly domain uml c : Class {
	    general = sc : Class {
	    }
	  };
	  
	  enforce domain rdbms t : Table {
	  };
	  
	  primitive domain prefix : String;
	  
	  where {
	    AttributeToColumn(sc, t, prefix);
	  }
	  
	}


	top relation AssocToFKey {
	  
	  an : String;
	  scn : String;
	  dcn : String;
	  fkn : String;
	  
	  
      checkonly domain uml a : Association { 
            name = an , 
            namespace=p : Package { }, 
            source=sc : Class { 
                name = scn ,  
                kind = 'Persistent'  
            }, 
            destination=dc : Class { 
                name = dcn ,  
                kind = 'Persistent'  
            } 
      }; 
      enforce domain rdbms fk : ForeignKey { 
            name = fkn , 
            refersTo=destTbl : Table { }, 
            owner=srcTbl : Table { 
                schema=s : Schema { } 
            } 
        }; 
         when { 
            PackageToSchema(p,s) ; 
            ClassToTable(sc,srcTbl) ; 
            ClassToTable(dc,destTbl) ; 
        }         	  
        where { 
            fkn = scn+'_'+an+'_'+dcn ; 
        } 	  
	}  	

	query PrimitiveTypeToSqlType (typename : String) : String {
	  if typename = 'INTEGER' then
	    'NUMBER'
	  else
	    if typename = 'BOOLEAN' then
	      'BOOLEAN'
	    else
	      'VARCHAR'
	    endif
	  endif
	}
	
}
